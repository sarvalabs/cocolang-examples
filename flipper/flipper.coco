// A simple logic with an internal boolean state
// that can be flipped, retrieved and modified.
coco Flipper

// The persistent state is used to define stateful
// values managed intrinsically by the logic. Only 
// a single call can access these values at a time.
// For PISA 0.3.2 target use state persistent
state logic:
    value Bool

// Init() deploy is a constructor that initializes the persitent state
// variables to their default values at the deploy time. 
// For PISA 0.3.2 target use endpoint deploy persistent Init()
endpoint Init():
    pass

// Seed() deployer is an alternate constructor
// that sets given initial value for the logic state.
// For PISA 0.3.2 target use endpoint deploy persistent Seed(initial Bool)
endpoint dynamic Seed(initial Bool):
    set(value: initial)

// Get() is an invoke that returns 
// the current value of the logic state
// For PISA 0.3.2 target use endpoint invoke readonly Get() -> (value Bool)
endpoint Get() -> (value Bool):
    observe value <- Flipper.Logic.value

// Set() is an invoke that sets 
// the given value to the logic state
// For PISA 0.3.2 target use endpoint invoke persistent Set(setval Bool)
endpoint dynamic Set(setval Bool):
    set(value: setval)

// Toggle() is an invoke that flips 
// the current value of the logic state
// For PISA 0.3.2 target use endpoint invoke persistent Toggle()
endpoint dynamic Toggle():
    mutate value <- Flipper.Logic.value:
        value = !value

// set() is a local function that 
// sets given value to the logic state
// For PISA 0.3.2 target use func persistent set(value Bool)
function dynamic set(value Bool):
    mutate value -> Flipper.Logic.value
