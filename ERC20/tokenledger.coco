// A logic with an internal state that
// implements a tokenledger with the 
// necessary functionality
coco TokenLedger

// The persistent state is used to define stateful
// values managed intrinsically by the logic. Only 
// a single call can access these values at a time.
// For PISA 0.3.2 target use state logic
state logic:
    Symbol String
    Supply U256
    Balances Map[Identifier]U256


// Seed() deployer is constructor that sets
// given initial value for the logic state.
// For PISA 0.3.2 target use endpoint deploy Seed(symbol String, supply U256):
endpoint dynamic Seed(symbol String, supply U256): 
    mutate symbol -> TokenLedger.Symbol
    mutate supply -> TokenLedger.Supply

    mutate balances <- TokenLedger.Balances:
        balances[Identifier(Sender)] = supply

    emit f"seeded {Identifier(Sender)} with {supply} {symbol}"

// Decimals() is an invokable that returns the 
// U64 value '2' to the output slot
// For PISA 0.3.2 target use endpoint invoke Decimals() -> (decimals U64)
endpoint Decimals() -> (decimals U64):
    yield decimals 18

// TotalSupply() is an invokable that returns the 
// supply U64 value stored in the logic state
// For PISA 0.3.2 target use endpoint invoke TotalSupply() -> (supply U256)
endpoint TotalSupply() -> (supply U256):
    observe supply <- TokenLedger.Supply

// BalanceOf() is an invokable that returns the 
// balance of the given address in the logic state
// For PISA 0.3.2 target use endpoint invoke BalanceOf(addr Address) -> (balance U256)
endpoint BalanceOf(addr Identifier) -> (balance U256):
    observe balances <- TokenLedger.Balances:
        // If balance exists for address, read and return
        // balance = 0, if no entry for the address
        if balances[addr]?:
            balance = balances[addr]

event Transfer:
    topic sender Identifier
    topic receiver Identifier
    field amount U256

// Transfer() is a stateful invokable that 
// moves the given amount from the sender's 
// wallet to the receiver's given address
// For PISA 0.3.2 target use endpoint invoke persistent Transfer(amount U256, receiver Address)
endpoint dynamic Transfer(amount U256, receiver Identifier):
    memory sender = Identifier(Sender)

    mutate balances <- TokenLedger.Balances:
        if !balances[sender]?: throw "sender has no balance"

        memory balance = balances[sender]
        if balance < amount: throw "sender has insufficient balance"

        if !balances[receiver]?:
            balances[receiver] = 0

        balances[sender] = balance - amount
        balances[receiver] += amount

    emit Transfer(sender, receiver, amount)

// Mint() is a stateful invokable that  
// adds the given amount to supply
// and balance of sender's wallet
// For PISA 0.3.2 target use endpoint invoke persistent Mint(amount U256)
endpoint dynamic Mint(amount U256):
    mutate supply <- TokenLedger.Supply:
        supply += amount

    mutate balances <- TokenLedger.Balances:
        memory sender = Identifier(Sender)

        if !balances[sender]?:
            balances[sender] = 0

        balances[sender] += amount

// Burn() is a stateful invokable that  
// subtracts the given amount to supply
// and balance of sender's wallet
// For PISA 0.3.2 target use endpoint invoke persistent Burn(amount U256)
endpoint dynamic Burn(amount U256):
    mutate supply <- TokenLedger.Supply:
        if supply < amount: throw "invalid burn amount: exceeds supply"
        supply -= amount

    mutate balances <- TokenLedger.Balances:
        memory sender = Identifier(Sender)

        if !balances[sender]?: 
            throw "invalid burn amount: sender has no balance"

        memory balance = balances[sender] 
        if balance < amount: throw "invalid burn amount: insufficient balance"

        balances[sender] -= amount
